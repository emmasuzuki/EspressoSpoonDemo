buildscript {
    repositories {
        google()
        mavenCentral()
        jcenter()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local/' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath 'com.jaredsburrows:gradle-spoon-plugin:1.5.1'
        classpath 'org.jacoco:org.jacoco.core:0.8.5'
    }

}

apply plugin: 'com.android.application'
apply plugin: 'com.jaredsburrows.spoon'
apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.5'
}

repositories {
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}


dependencies {
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.3'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'org.apache.httpcomponents:httpclient-android:4.3.5+'

    androidTestImplementation 'androidx.test:runner:1.1.2-alpha01'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha4'
    androidTestImplementation 'androidx.test:rules:1.1.2-alpha01'
    androidTestImplementation 'com.squareup.spoon:spoon-client:2.0.0-SNAPSHOT'
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'net.lightbody.bmp:browsermob-core:2.1.5'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.robolectric:robolectric:4.8.1'
    testImplementation 'androidx.test:core:1.4.1-alpha06'
    testImplementation "androidx.test:runner:1.1.1"
    testImplementation 'androidx.test.ext:junit:1.1.0'
    testImplementation 'androidx.test.ext:truth:1.1.0'
    testImplementation 'androidx.test.espresso:espresso-core:3.5.0-alpha01'
    testImplementation 'androidx.test.espresso:espresso-intents:3.1.1'
}
android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.emmasuzuki.espressospoon"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

spoon {
    debug = true
    baseOutputDir = file("$buildDir/custom-report-dir")
    adbTimeout = 30
    grantAllPermissions = true
    shard = true
    codeCoverage = true

    if (project.hasProperty("TestGroup")) {
        if (project.TestGroup == "Sanity") {
            instrumentationArgs = ["notAnnotation=com.emmasuzuki.espressospoondemo.utils.annotations.Failure"]
        } else {
            instrumentationArgs = ["annotation=com.emmasuzuki.espressospoondemo.utils.annotations." + project.TestGroup]
        }
    }

    if (project.hasProperty("Devices")) {
        devices = project.Devices.split(",")
    }


}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['spoonDebugAndroidTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "custom-report-dir/debug/coverage/merged-coverage.ec"
    ]))
}

